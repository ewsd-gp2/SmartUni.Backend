// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartUni.PublicApi.Common.Domain;
using SmartUni.PublicApi.Persistence;

#nullable disable

namespace SmartUni.PublicApi.Migrations
{
    [DbContext(typeof(SmartUniDbContext))]
    partial class SmartUniDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "attendance_status", new[] { "absent", "leave", "present" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender", new[] { "female", "male" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "major", new[] { "computing", "information_systems", "networking" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "meeting_link_type", new[] { "google_meet", "microsoft_teams", "zoom" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "meeting_status", new[] { "cancelled", "completed", "new" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_net_role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claim_role_id");

                    b.ToTable("asp_net_role_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claim_user_id");

                    b.ToTable("asp_net_user_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_login_user_id");

                    b.ToTable("asp_net_user_login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_role_role_id");

                    b.ToTable("asp_net_user_role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_token");

                    b.ToTable("asp_net_user_token", (string)null);
                });

            modelBuilder.Entity("SmartUni.PublicApi.Common.Domain.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("asp_net_user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8edcd6b3-0489-4766-abed-284e8945f13d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eba2f237-2092-401e-9c31-3371ff170cdf",
                            Email = "super@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER@GMAIL.COM",
                            NormalizedUserName = "super@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBO76UEQJKnMJnRWMaqsAZS3Qbuua1nQ47HoHOEDwe20rlsfO42Eqt1o58vU539ZhA==",
                            PhoneNumber = "0948827282",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "super@gmail.com"
                        });
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Allocation.Allocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("tutor_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_allocation");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasDatabaseName("ix_allocation_student_id");

                    b.ToTable("allocation", (string)null);
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Meeting.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Agenda")
                        .HasColumnType("text")
                        .HasColumnName("agenda");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean")
                        .HasColumnName("is_online");

                    b.Property<Enums.MeetingLinkType?>("LinkType")
                        .HasColumnType("meeting_link_type")
                        .HasColumnName("link_type");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uuid")
                        .HasColumnName("organizer_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<Enums.MeetingStatus>("Status")
                        .HasColumnType("meeting_status")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_meeting");

                    b.HasIndex("OrganizerId", "StartTime")
                        .IsUnique()
                        .HasDatabaseName("ix_meeting_organizer_id_start_time");

                    b.ToTable("meeting", (string)null);
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Meeting.MeetingParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Enums.AttendanceStatus>("Attendance")
                        .HasColumnType("attendance_status")
                        .HasColumnName("attendance");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uuid")
                        .HasColumnName("meeting_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_meetingparticipant");

                    b.HasIndex("MeetingId")
                        .HasDatabaseName("ix_meetingparticipant_meeting_id");

                    b.HasIndex("StudentId", "MeetingId")
                        .IsUnique()
                        .HasDatabaseName("ix_meetingparticipant_student_id_meeting_id");

                    b.ToTable("meetingparticipant", (string)null);
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Message.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChatRoomId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chat_room_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_chatmessage");

                    b.ToTable("chatmessage", (string)null);
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Message.ChatParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatRoomId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chat_room_id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_chatparticipant");

                    b.ToTable("chatparticipant", (string)null);
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Staff.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Enums.GenderType>("Gender")
                        .HasColumnType("gender")
                        .HasColumnName("gender");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_staff");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_staff_identity_id");

                    b.ToTable("staff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fb67550-b862-4a0f-94fd-c212f5e35802"),
                            CreatedBy = new Guid("8fb67550-b862-4a0f-94fd-c212f5e35802"),
                            CreatedOn = new DateTime(2025, 3, 16, 17, 0, 0, 0, DateTimeKind.Utc),
                            Gender = Enums.GenderType.Male,
                            IdentityId = new Guid("8edcd6b3-0489-4766-abed-284e8945f13d"),
                            IsDeleted = false,
                            Name = "super staff"
                        });
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Student.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Enums.GenderType>("Gender")
                        .HasColumnType("gender")
                        .HasColumnName("gender");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Enums.MajorType>("Major")
                        .HasColumnType("major")
                        .HasColumnName("major");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_student");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_student_identity_id");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Tutor.Tutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Enums.GenderType>("Gender")
                        .HasColumnType("gender")
                        .HasColumnName("gender");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Enums.MajorType>("Major")
                        .HasColumnType("major")
                        .HasColumnName("major");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_tutor");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_tutor_identity_id");

                    b.ToTable("tutor", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claim_asp_net_role_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SmartUni.PublicApi.Common.Domain.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claim_asp_net_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartUni.PublicApi.Common.Domain.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_login_asp_net_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_role_asp_net_role_role_id");

                    b.HasOne("SmartUni.PublicApi.Common.Domain.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_role_asp_net_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SmartUni.PublicApi.Common.Domain.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_token_asp_net_user_user_id");
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Allocation.Allocation", b =>
                {
                    b.HasOne("SmartUni.PublicApi.Features.Student.Student", "Student")
                        .WithOne("Allocation")
                        .HasForeignKey("SmartUni.PublicApi.Features.Allocation.Allocation", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_allocation_student_student_id");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Meeting.Meeting", b =>
                {
                    b.HasOne("SmartUni.PublicApi.Features.Tutor.Tutor", "Organizer")
                        .WithMany("Meetings")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meeting_tutor_organizer_id");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Meeting.MeetingParticipant", b =>
                {
                    b.HasOne("SmartUni.PublicApi.Features.Meeting.Meeting", "Meeting")
                        .WithMany("Participants")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meetingparticipant_meeting_meeting_id");

                    b.HasOne("SmartUni.PublicApi.Features.Student.Student", "Student")
                        .WithMany("Meetings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meetingparticipant_student_student_id");

                    b.Navigation("Meeting");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Staff.Staff", b =>
                {
                    b.HasOne("SmartUni.PublicApi.Common.Domain.BaseUser", "Identity")
                        .WithOne("Staff")
                        .HasForeignKey("SmartUni.PublicApi.Features.Staff.Staff", "IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_staff_users_identity_id");

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Student.Student", b =>
                {
                    b.HasOne("SmartUni.PublicApi.Common.Domain.BaseUser", "Identity")
                        .WithOne("Student")
                        .HasForeignKey("SmartUni.PublicApi.Features.Student.Student", "IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_users_identity_id");

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Tutor.Tutor", b =>
                {
                    b.HasOne("SmartUni.PublicApi.Common.Domain.BaseUser", "Identity")
                        .WithOne("Tutor")
                        .HasForeignKey("SmartUni.PublicApi.Features.Tutor.Tutor", "IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tutor_users_identity_id");

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("SmartUni.PublicApi.Common.Domain.BaseUser", b =>
                {
                    b.Navigation("Staff")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("Tutor")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Meeting.Meeting", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Student.Student", b =>
                {
                    b.Navigation("Allocation");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("SmartUni.PublicApi.Features.Tutor.Tutor", b =>
                {
                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
